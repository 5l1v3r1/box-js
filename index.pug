doctype html
head
	meta(charset="utf-8")
	meta(name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes")
	meta(name="author" content="CapacitorSet")
	link(rel="stylesheet" href="bulma.min.css")
	title Box.js: a tool for studying JavaScript malware
body
	section.hero.is-primary.is-bold.is-small
		.hero-head: header.nav.is-hidden-mobile: .container
			.nav-right.nav-menu
				.nav-item: a(href="#features") Features
				.nav-item: a(href="#install") Installation
				.nav-item: a(href="#use") Usage
				.nav-item: a.button(href="https://github.com/CapacitorSet/box-js/releases") Download
		.hero-body: .container
			h1.title Box.js
			p.subtitle A tool for studying JavaScript malware
			.tags
				a.tag.is-dark(href="https://github.com/CapacitorSet/box-js") GitHub
				a.tag.is-dark(href="https://npmjs.com/package/box-js") npm
				a.tag.is-dark(href="https://hub.docker.com/r/capacitorset/box-js/") Docker
	section.section
		| Box-js is a JScript emulator aimed at analyzing JavaScript droppers typically found in malicious e-mails. It is meant to be #[strong significantly faster] than virtual machine-based analysis, cutting analysis times down to 10-20 seconds per sample using a fraction of the memory; however, it is also flexible enough to assist a malware researcher in reverse engineering a single sample.
	section.section#features
		h2.title Main features
		h5.title.is-5 ActiveX emulation
		| The strength of box-js lies in ActiveX emulation: it creates stubs of ActiveX plugins that from the sample's point of view work exactly like their Windows counterparts, but "behind the scenes" record every interaction. It supports all major plugins (#[tt MSXML2.XMLHTTP], #[tt WScript.Shell], #[tt ADODB.Stream], #[tt Scripting.FileSystemObject]) and some minor ones: #[a(href="https://github.com/CapacitorSet/box-js/tree/master/emulator") here] is the full list.

		br
		br

		h3.title.is-5 Suitable for integration
		| Although box-js can be used on its own, it can also integrate with various tools in an analysis pipeline.
		.content: ul
			li.
				At the most basic level, box-js exports the list of files and URLs in JSON, which can be easily read by both humans and tools, as well as manipulated with grep/sed/awk.
			li.
				After the analysis, it can submit the results to a #[a(href="https://cuckoosandbox.org/") Cuckoo] instance, #[a(href="https://malwr.com/") Malwr], or #[a(href="https://virustotal.com/") VirusTotal] with their respective APIs.
			li.
				It features a Cuckoo processing module, enabling box-js to be used as part of a complex toolchain. The module itself relies on a REST API to upload samples and retrieve results.

		h3.title.is-5 Secure
		| The malicious sample is isolated from the analysis module via a #[a(href="https://nodejs.org/api/vm.html") V8 sandbox] which doesn't expose system APIs to the malicious sample, which is further #[a(href="https://npmjs.com/package/vm2") hardened] to prevent escaping. Most importantly, every analysis should be run in a Docker container with limited host filesystem access, meaning that an attack on box-js can only compromise one analysis, not the entire system.

	section.section#install
		h1.title Installation
		p Requires Node 6.x or greater.
		pre: b.
			$ npm install --global box-js
	
	section.section#use
		h4.title Usage
		article.message.is-warning
			.message-header Warning
			.message-body.
				This section is a work in progress. While the example still works, the features have expanded a lot.
		pre.
			<b>$ box-js sample.js --download --no-kill --timeout=60</b>
			Analyzing sample.js
			New ActiveXObject: Scripting.FileSystemObject
			New ActiveXObject: Scripting.FileSystemObject
			New ActiveXObject: WScript.Shell
			New ActiveXObject: MSXML2.XMLHTTP
			New ActiveXObject: ADODB.Stream
			Header set for http://foo.bar/admin.php?f=1.dat: User-Agent Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko
			Emulating a get request to http://foo.bar/admin.php?f=1.dat
			Downloaded 198353 bytes.
			Saved sample.js.results/fa9870f9-c3f9-4c06-bcf7-2472d9ebae4f (198353 bytes)
			sample.js.results/fa9870f9-c3f9-4c06-bcf7-2472d9ebae4f has been detected as PE32 executable (GUI) Intel 80386, for MS Windows.
			Active URL detected: http://foo.bar/admin.php?f=1.dat
			Executing sample.js.results/9539b473-c62d-4b99-a659-5aa28842aacc in the WScript shell

			<b>$ cat sample.js.results/9539b473-c62d-4b99-a659-5aa28842aacc</b>
			cmd.exe /c (Temporary folder)(Temporary file) 0

	script(type="text/javascript").
		// Self-hosted Piwik tracking
		var _paq = _paq || [];
		/* tracker methods like "setCustomDimension" should be called before "trackPageView" */
		_paq.push(["setDoNotTrack", true]);
		_paq.push(['trackPageView']);
		_paq.push(['enableLinkTracking']);
		(function() {
			var u="//piwik.mastodonti.co/";
			_paq.push(['setTrackerUrl', u+'piwik.php']);
			_paq.push(['setSiteId', '4']);
			var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
			g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);
		})();