var esprima = require("esprima"),
	escodegen = require("escodegen"),
	vm = require("vm"),
	fs = require("fs"),
	controller = require("./_controller");

const sample = fs.readFileSync("patch.js", "utf8") + fs.readFileSync("sample.js", "utf8");
evaluator(sample);

function evaluator(code) {
	if (code.match("@cc_on")) {
		console.log("The code appears to contain conditional compilation statements.");
		console.log("If you run into unexpected results, try uncommenting lines that look like")
		console.log("")
		console.log("    /*@cc_on")
		console.log("    <JavaScript code>")
		console.log("    @*/")
		console.log("")
	}

	if (process.argv.indexOf("--no-rewrite") == -1) {
		if (process.argv.indexOf("--no-concat-simplify") == -1) {
			code = code.replace(/\'[ \n]*\+[ \n]*\'/gm, "");
			code = code.replace(/"[ \n]*\+[ \n]*"/gm, "");
		}
		var tree = esprima.parse(code);
		if (process.argv.indexOf("--no-function-rewrite") == -1) {
			traverse(tree, function(key, val) {
				if (key != "callee") return;
				if (val.autogenerated) return; // Don't transform twice the same object
				if (val.type == "MemberExpression") // foo.bar
					return require("./patches/this.js")(val.object, val);
				else
					return require("./patches/nothis.js")(val);
			});
		}
		//console.log(JSON.stringify(tree, null, "\t"));
		code = escodegen.generate(tree);
	}
	controller.logJS(code);

	var sandbox = {
		_logJS: controller.logJS,
		console: {
			log: x => console.log(x)
		},
		WScript: new Proxy({}, {
			get: function(target, name) {
				switch (name) {
					case "Arguments":
						return []
					case "CreateObject":
						return ActiveXObject
					case "Sleep":
						// return x => console.log(`Sleeping for ${x} ms...`)
						return x => {}
					case "Quit":
						return () => {};
					case "ScriptFullName":
						return "(ScriptFullName)";
					case "Echo":
						return x => console.log("Script wrote:", x);
					default:
						controller.kill(`WScript.${name} not implemented!`)
				}
			}
		}),
		ActiveXObject
	}

	return vm.runInNewContext(code, sandbox, {
		displayErrors: true,
		filename: "sample.js",
		timeout: 10000
	});
}

function ActiveXObject(name) {
	// console.log("New ActiveXObject created:", name);
	if (name.match("WinHttpRequest"))
		return require("./_emulator/WinHttpRequest")();
	if (name.match("DOMDocument")) {
		this.createElement = require("./_emulator/DOM");
		return;
	}

	switch (name) {
		case "WScript.Shell":
			return require("./_emulator/WScriptShell")();
		case "MSXML2.XMLHTTP":
			return require("./_emulator/XMLHTTP")();
		case "ADODB.Stream":
			return require("./_emulator/ADODBStream")();
		case "WScript.Network":
			return require("./_emulator/WScriptNetwork")();
		case "Scripting.FileSystemObject":
			return require("./_emulator/FileSystemObject")();
		default:
			controller.kill(`Unknown ActiveXObject ${name}`);
			break;
	}
}

function traverse(obj, func) {
	var keys = Object.keys(obj);
	for (let i = 0; i < keys.length; i++) {
		let key = keys[i];
		var replacement = func.apply(this, [key, obj[key]]);
		if (replacement) obj[key] = replacement;
		if (obj.autogenerated) continue;
		if (obj[key] !== null && typeof(obj[key]) == "object")
			traverse(obj[key], func);
	}
}